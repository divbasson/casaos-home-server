# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '29 23 * * 3'

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647
          
      - name: Gitleaks Scanner
      # You may pin to the exact commit or the version.
        uses: DariuszPorowski/github-action-gitleaks@5c3e70f794d4c928460daf621eff608f477c2510
      #uses: DariuszPorowski/github-action-gitleaks@v2.0.9
        with:
          # Path to source (relative to $GITHUB_WORKSPACE) (default: $GITHUB_WORKSPACE)
          source: # optional
          # Config file path (relative to $GITHUB_WORKSPACE) (default build-in: /.gitleaks/UDMSecretChecks.toml)
          config: # optional, default is /.gitleaks/UDMSecretChecks.toml
          # Report file format: json, csv, sarif (default: json)
          report_format: # optional, default is json
          # Treat git repos as plain directories and scan those file (default: <not set>)
          no_git: # optional
          # Path to baseline with issues that can be ignored (relative to $GITHUB_WORKSPACE) (default: <not set>)
          baseline_path: # optional
          # Redact secrets from logs and stdout (default: true)
          redact: # optional, default is true
          # Fail if secrets founded (default: true)
          fail: # optional, default is true
          # Show verbose output from scan (default: true)
          verbose: # optional, default is true
          # Log level (trace, debug, info, warn, error, fatal) (default: info)
          log_level: # optional, default is info
  
        # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: results.sarif
              
